import{_ as o,c as t,a3 as a,o as l}from"./chunks/framework.C4Vvvhxx.js";const p=JSON.parse('{"title":"Upgrade to v20.0.0","description":"","frontmatter":{},"headers":[],"relativePath":"upgrade-v20.md","filePath":"upgrade-v20.md"}'),r={name:"upgrade-v20.md"};function i(c,e,n,d,s,h){return l(),t("div",null,e[0]||(e[0]=[a('<h1 id="upgrade-to-v20-0-0" tabindex="-1">Upgrade to v20.0.0 <a class="header-anchor" href="#upgrade-to-v20-0-0" aria-label="Permalink to &quot;Upgrade to v20.0.0&quot;">​</a></h1><p>All major components in the Shuttle space have a <code>semver</code> version number starting at <code>20.0.0</code> and all synchronous methods have been removed where an asynchronous method is available. The approach is now <code>async</code> first.</p><p>Also, only the lastest LTS version of <code>dotnet</code> will be supported going forward.</p><h2 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">​</a></h2><p>Please note that there are quite a few breaking changes. These will, typically, require minimal rework or &quot;search &amp; replace&quot; to fix but it is still going to take some work.</p><h2 id="shuttle-core" tabindex="-1">Shuttle.Core <a class="header-anchor" href="#shuttle-core" aria-label="Permalink to &quot;Shuttle.Core&quot;">​</a></h2><h3 id="shuttle-core-contract" tabindex="-1">Shuttle.Core.Contract <a class="header-anchor" href="#shuttle-core-contract" aria-label="Permalink to &quot;Shuttle.Core.Contract&quot;">​</a></h3><ul><li>Throwing <code>ArgumentNullException</code> instead of <code>NullReferenceException</code> for <code>AgainstNull</code> and <code>AgainstNullOrEmptyString</code>.</li></ul><h3 id="shuttle-core-data" tabindex="-1">Shuttle.Core.Data <a class="header-anchor" href="#shuttle-core-data" aria-label="Permalink to &quot;Shuttle.Core.Data&quot;">​</a></h3><ul><li>Removed <code>ScriptProvider</code> as query factories should rather be used.</li></ul><h3 id="shuttle-core-mediator" tabindex="-1">Shuttle.Core.Mediator <a class="header-anchor" href="#shuttle-core-mediator" aria-label="Permalink to &quot;Shuttle.Core.Mediator&quot;">​</a></h3><ul><li>Renamed <code>IAsyncParticipant</code> to <code>IParticipant</code>.</li></ul><h3 id="shuttle-core-pipelines" tabindex="-1">Shuttle.Core.Pipelines <a class="header-anchor" href="#shuttle-core-pipelines" aria-label="Permalink to &quot;Shuttle.Core.Pipelines&quot;">​</a></h3><ul><li><code>IPipelineObserver</code>: changed <code>Task ExecuteAsync(TPipelineEvent pipelineEvent)</code> to <code>Task ExecuteAsync(IPipelineContext&lt;TPipelineEvent&gt; pipelineContext)</code>.</li><li>Pipeline events no longer need to inherit from <code>PipelineEvent</code>; and it has been removed.</li></ul><h3 id="shuttle-core-reflection" tabindex="-1">Shuttle.Core.Reflection <a class="header-anchor" href="#shuttle-core-reflection" aria-label="Permalink to &quot;Shuttle.Core.Reflection&quot;">​</a></h3><ul><li>Removed <code>IReflectionService.AssemblyPath</code>.</li><li>Removed <code>IReflectionService.FindAssemblyNamedAsync</code>.</li><li>Removed <code>IReflectionService.GetAssemblyAsync</code>.</li><li>Removed <code>IReflectionService.GetTypesAsync</code>.</li><li>Renamed <code>IReflectionService.GetTypesAssignableToAsync</code> to <code>IReflectionService.GetTypesCastableToAsync</code>.</li></ul><h2 id="shuttle-esb" tabindex="-1">Shuttle.Esb <a class="header-anchor" href="#shuttle-esb" aria-label="Permalink to &quot;Shuttle.Esb&quot;">​</a></h2><blockquote><p><strong>Note</strong>: Using <code>JsonSerializer</code> as the default. To use XML call <code>services.AddSingleton&lt;ISerializer, XmlSerializer&gt;()</code> before calling <code>services.AddServiceBus()</code>.</p></blockquote><ul><li>Renamed <code>IAsyncMessageHandler</code> to <code>IMessageHandler</code>.</li><li><code>ServiceBusOptions.Asynchronous</code> as <code>async</code> is now the preferred mechanism.</li><li>Removed all idempotence features, such as <code>IIdempotenceService</code> and <code>IdempotenceOptions</code>, as idempotence should be a module.</li><li><code>MessageHandlerInvokeResult</code> removed in favour of returning <code>bool</code> from <code>IMessageHandlerInvoker.InvokeAsync</code>.</li><li><code>IReusability</code> removed as handlers are obtained from the <code>IServiceProvider</code>.</li><li><code>IMessageHandlingAssessor</code> removed.</li></ul><h2 id="shuttle-recall" tabindex="-1">Shuttle.Recall <a class="header-anchor" href="#shuttle-recall" aria-label="Permalink to &quot;Shuttle.Recall&quot;">​</a></h2><ul><li>Renamed <code>IAsyncEventHandler</code> to <code>IEventHandler</code>.</li><li>Removed <code>EventStore.CreateEventStream</code>. Using <code>EventStore.GetAsync</code> will return an empty event stream if none exists.</li><li>Renamed <code>EventStream.AddEvent</code> to <code>EventStream.Add</code>.</li><li>Removed snapshots as such funcationality should be modelled explicity, for instance using the <a href="https://event-driven.io/en/closing_the_books_in_practice/" target="_blank" rel="noreferrer">Closing the Books pattern</a>.</li></ul>',21)]))}const m=o(r,[["render",i]]);export{p as __pageData,m as default};
