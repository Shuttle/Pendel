import{_ as i,c as e,a3 as a,o as n}from"./chunks/framework.C4Vvvhxx.js";const c=JSON.parse('{"title":"Projections","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-recall/projections/overview.md","filePath":"shuttle-recall/projections/overview.md"}'),t={name:"shuttle-recall/projections/overview.md"};function h(l,s,p,r,k,o){return n(),e("div",null,s[0]||(s[0]=[a(`<h1 id="projections" tabindex="-1">Projections <a class="header-anchor" href="#projections" aria-label="Permalink to &quot;Projections&quot;">​</a></h1><p>Event processing relates to the <em>Query Responsibility</em> side of the <em>Command/Query Responsibility Segregation</em> pattern.</p><p>Since the event sourcing side of things produces a series of events that are chronologically ordered we can process those events one after the other to produce any output structures that are required for reporting, querying, or business intelligence.</p><p>Each one of these processing streams is called a <strong>projection</strong>. All events for a given <code>CorrelationId</code>, or <code>Id</code> if <code>CorrelationId</code> is <code>null</code>, are processed in order using the <code>SequenceNumber</code>.</p><h2 id="eventprocessor" tabindex="-1">EventProcessor <a class="header-anchor" href="#eventprocessor" aria-label="Permalink to &quot;EventProcessor&quot;">​</a></h2><p>An <code>EventProcessor</code> instance is used to manage all the projections. <code>EventProjection</code> instances may be added to the <code>EventProcessor</code> and each runs on its own thread. In contrast to normal message processing there is no <strong>poison</strong> queue and no retries. If processing fails for any reason the process should be terminated.</p><h2 id="projection" tabindex="-1">Projection <a class="header-anchor" href="#projection" aria-label="Permalink to &quot;Projection&quot;">​</a></h2><p>A <code>Projection</code> has a name and represents a specific set of output data that you are interested in. Each projection is a logical queue that has a current position within the event stream. All event store messages should have a global sequence number that is used as a <em>cursor</em> of sorts.</p><p>When you need to rebuild your read model for whatever reason you can delete the read model, reset the projection&#39;s position back to zero (or delete it), and re-run the projection. One should be cognizant of the fact that rebuilding a projection may take some time and in certain cases it may be worth the effort to create a separate projection that can later be renamed, once it has been populated.</p><h3 id="addeventhandler" tabindex="-1">AddEventHandler <a class="header-anchor" href="#addeventhandler" aria-label="Permalink to &quot;AddEventHandler&quot;">​</a></h3><p>In order to be able to handle any events in your projection you will need to add event handlers using the <code>AddEventHandler</code> method using the <code>EventStoreBuilder</code>:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddEventStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddProjection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;projection-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // event handler type, with optional service lifetime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type, Func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type, ServiceLifetime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // event handler instance (singleton)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // event handler delegate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Delegate)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // event handler generic type, with optional service lifetime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(Func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type, ServiceLifetime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="ieventhandler" tabindex="-1">IEventHandler <a class="header-anchor" href="#ieventhandler" aria-label="Permalink to &quot;IEventHandler&quot;">​</a></h2><p>Depending on the value of the <code>EventStoreOptions.Asynchronous</code> options, an event handler must implement either the <code>IAsyncEventHandler</code> interface for asynchronous support, or <code>IEventHandler</code> for synchronous event handling:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessEventAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IEventHandlerContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ieventhandlercontext" tabindex="-1">IEventHandlerContext <a class="header-anchor" href="#ieventhandlercontext" aria-label="Permalink to &quot;IEventHandlerContext&quot;">​</a></h3><p>The event handler context provides the full <code>EventEnvelope</code> and <code>PrimitiveEvent</code>, the actual deserialized domain <code>Event</code> containing the original data that was added to the <code>EventStream</code>, and a <code>CancellationToken</code> that you can interrogate to determine if the processing is still active.</p><p>It also contains the <code>Projection</code>.</p><h2 id="iprojectionservice" tabindex="-1">IProjectionService <a class="header-anchor" href="#iprojectionservice" aria-label="Permalink to &quot;IProjectionService&quot;">​</a></h2><p>The <code>IProjectionService</code> interface is implemented by a technology-specific package. The <code>Shuttle.Recall.Sql.EventProcessing</code> package provides a Sql Server based implementation of the <code>IProjectionService</code>.</p><h3 id="geteventasync" tabindex="-1">GetEventAsync <a class="header-anchor" href="#geteventasync" aria-label="Permalink to &quot;GetEventAsync&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProjectionEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetEventAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IPipelineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnGetEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipelineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns the <code>ProjectionEvent</code> that needs to be processed:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProjectionEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProjectionEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Projection</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> projection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrimitiveEvent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> primitiveEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Projection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Guard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AgainstNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projection);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PrimitiveEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Guard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AgainstNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(primitiveEvent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Projection</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Projection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrimitiveEvent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrimitiveEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="acknowledgeeventasync" tabindex="-1">AcknowledgeEventAsync <a class="header-anchor" href="#acknowledgeeventasync" aria-label="Permalink to &quot;AcknowledgeEventAsync&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AcknowledgeEventAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IPipelineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnAcknowledgeEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipelineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Indicates that a projection event has been processed. The pipeline state contains the relevant object:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> projectionEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Guard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AgainstNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pipelineContext).Pipeline.State.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetProjectionEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,28)]))}const E=i(t,[["render",h]]);export{c as __pageData,E as default};
