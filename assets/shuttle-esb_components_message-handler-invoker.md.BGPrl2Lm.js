import{_ as a,c as s,ag as n,o as i}from"./chunks/framework.BhyQDeIx.js";const c=JSON.parse('{"title":"Message Handler Invoker","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/components/message-handler-invoker.md","filePath":"shuttle-esb/components/message-handler-invoker.md"}'),t={name:"shuttle-esb/components/message-handler-invoker.md"};function o(r,e,d,l,h,k){return i(),s("div",null,e[0]||(e[0]=[n('<h1 id="message-handler-invoker" tabindex="-1">Message Handler Invoker <a class="header-anchor" href="#message-handler-invoker" aria-label="Permalink to &quot;Message Handler Invoker&quot;">​</a></h1><p>An implementation of the <code>IMessageHandlerInvoker</code> interface is used to invoke a mesage handler for the given message in the <code>PipelineEvent</code>.</p><p>If you do not specify your own implementation of the <code>IMessageHandlerInvoker</code> the default <code>MessageHandlerInvoker</code> will be used. This invoker makes use of the <code>IServiceProvider</code> to create the required message handler.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="invoke" tabindex="-1">Invoke <a class="header-anchor" href="#invoke" aria-label="Permalink to &quot;Invoke&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValueTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InvokeAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IPipelineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnHandleMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipelineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Invoke the message handler using the data contained in the given <code>PipelineEvent</code>.</p><h1 id="messagehandlerinvoker" tabindex="-1">MessageHandlerInvoker <a class="header-anchor" href="#messagehandlerinvoker" aria-label="Permalink to &quot;MessageHandlerInvoker&quot;">​</a></h1><p>Type <code>MessageHandlerInvoker</code> implements the <code>IMessageHandlerInvoker</code> interface and will attempt to find a matching delegate or implementation of the required <code>IMessageHandler&lt;&gt;</code> interface.</p><p>If no delegate or handler can be found <code>false</code> is returned.</p><p>The <code>IServiceProvder</code> is used to obtain a handler.</p>',11)]))}const g=a(t,[["render",o]]);export{c as __pageData,g as default};
