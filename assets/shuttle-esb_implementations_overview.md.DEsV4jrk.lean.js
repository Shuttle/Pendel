import{_ as s,c as a,a3 as t,o as i}from"./chunks/framework.C4Vvvhxx.js";const u=JSON.parse('{"title":"Implementations","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/implementations/overview.md","filePath":"shuttle-esb/implementations/overview.md"}'),n={name:"shuttle-esb/implementations/overview.md"};function o(l,e,p,h,r,c){return i(),a("div",null,e[0]||(e[0]=[t(`<h1 id="implementations" tabindex="-1">Implementations <a class="header-anchor" href="#implementations" aria-label="Permalink to &quot;Implementations&quot;">​</a></h1><p>These packages are those implementing the queue interfaces <code>IQueue</code> and <code>IQueueFactory</code>, subscription service implementations of <code>ISubscriptionService</code>, and then the <code>IIdempotenceService</code> implementations.</p><h2 id="queues" tabindex="-1">Queues <a class="header-anchor" href="#queues" aria-label="Permalink to &quot;Queues&quot;">​</a></h2><p>The convention for queue URIs is <code>scheme://configuration-name/queue-name</code> and the <code>scheme</code> represents a unique name for the <code>IQueue</code> implementation. The <code>scheme</code> and <code>configuration-name</code> (represented by the URI&#39;s <code>Host</code> property) should always be lowercase as creating a <code>new Uri(uriString)</code> forces the scheme and host to lowercase.</p><p>Each <code>configuration</code> is a named set of options and would contain all the values required to communicate with the <code>queue</code> as well as any other bits that may be of interest.</p><p>The typical JSON settings structure for a queue implementation would follow the following convetion:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Shuttle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ImplementationName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;configuration-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;OptionA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value-a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="streams" tabindex="-1">Streams <a class="header-anchor" href="#streams" aria-label="Permalink to &quot;Streams&quot;">​</a></h2><p>Stream implementations also implement the same interfaces as queues except that the <code>IQueue.IsStream</code> returns <code>true</code> which allows the service bus to handle exceptions differently.</p>`,9)]))}const m=s(n,[["render",o]]);export{u as __pageData,m as default};
