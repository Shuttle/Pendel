import{_ as i,c as e,ag as a,o as t}from"./chunks/framework.BhyQDeIx.js";const c=JSON.parse('{"title":"Shuttle.Core.Mediator","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-core/shuttle-core-mediator.md","filePath":"shuttle-core/shuttle-core-mediator.md"}'),n={name:"shuttle-core/shuttle-core-mediator.md"};function h(l,s,p,r,o,d){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="shuttle-core-mediator" tabindex="-1">Shuttle.Core.Mediator <a class="header-anchor" href="#shuttle-core-mediator" aria-label="Permalink to &quot;Shuttle.Core.Mediator&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PM&gt; Install-Package Shuttle.Core.Mediator</span></span></code></pre></div><p>The Shuttle.Core.Mediator package provides a <a href="https://en.wikipedia.org/wiki/Mediator_pattern" target="_blank" rel="noreferrer">mediator pattern</a> implementation.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>In order to get all the relevant bits working you would need to register the <code>IMediator</code> dependency along with all the relevant <code>IParticipant</code> dependencies.</p><p>You can register the mediator using <code>IServiceCollection</code>:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddMediator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddParticipants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assembly);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddParticipant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Participant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddParticipant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(participantType);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddParticipant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(participant);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddParticipant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IParticipantContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Task.CompletedTask.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConfigureAwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div><h2 id="imediator" tabindex="-1">IMediator <a class="header-anchor" href="#imediator" aria-label="Permalink to &quot;IMediator&quot;">​</a></h2><p>The core interface is the <code>IMediator</code> interface and the default implementation provided is the <code>Mediator</code> class.</p><p>Participants types are instatiated from the <code>IServiceProvider</code> instance. This means that it depends on how you register the type as to the behaviour.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SendAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The <code>SendAsync</code> method will find all participants that implement the <code>IParticipant&lt;T&gt;</code> with the type <code>T</code> of the message type that you are sending.</p><h2 id="participant-implementations" tabindex="-1">Participant implementations <a class="header-anchor" href="#participant-implementations" aria-label="Permalink to &quot;Participant implementations&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IParticipant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessMessageAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IParticipantContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A participant would handle the message that is sent using the mediator. There may be any number of participants that process the message.</p><h2 id="design-philosophy" tabindex="-1">Design philosophy <a class="header-anchor" href="#design-philosophy" aria-label="Permalink to &quot;Design philosophy&quot;">​</a></h2><p>There are no <em>request/response</em> semantics and the design philosophy here is that the message encapsulates the state that is passed along in a <em>pipes &amp; filters</em> approach.</p><p>However, you may wish to make use of one of the existing utility classes:-</p><h3 id="requestmessage-trequest" tabindex="-1">RequestMessage&lt;TRequest&gt; <a class="header-anchor" href="#requestmessage-trequest" aria-label="Permalink to &quot;RequestMessage\\&lt;TRequest\\&gt;&quot;">​</a></h3><p>The only expectation from a <code>RequestMessage&lt;TRequest&gt;</code> instance is either a success or failure (along with the failure message).</p><h3 id="requestresponsemessage-trequest-tresponse" tabindex="-1">RequestResponseMessage&lt;TRequest, TResponse&gt; <a class="header-anchor" href="#requestresponsemessage-trequest-tresponse" aria-label="Permalink to &quot;RequestResponseMessage\\&lt;TRequest, TResponse\\&gt;&quot;">​</a></h3><p>The <code>RequestResponseMessage&lt;TRequest, TResponse&gt;</code> takes an initial <code>TRequest</code> object and after the mediator processing would expect that there be a <code>TResponse</code> provided using the <code>.WithResponse(TResponse)</code> method. The same success/failure mechanism used in the <code>RequestMessage&lt;TRequest&gt;</code> class is also available on this class.</p><h2 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-label="Permalink to &quot;Considerations&quot;">​</a></h2><p>If you have a rather predictable sequential workflow and you require something with faster execution then you may wish to consider the <a href="http://shuttle.github.io/shuttle-core/shuttle-core-pipelines" target="_blank" rel="noreferrer">Shuttle.Core.Pipelines</a> package.</p><p>Performing a benchmark for your use-case would be able to indicate the more suitable option.</p>`,25)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
